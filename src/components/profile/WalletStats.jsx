// src/components/profile/WalletStats.jsx
import { useEffect, useState } from "react";
import { useAuth } from "../../context/AuthContext";
import root from "../../assets/styles/Root.module.css";
import s from "../../assets/styles/WalletStats.module.css";

const fmtUSD = (v) => (v == null ? "0.00" : Number(v).toFixed(2));

export default function WalletStats() {
   // ‚ùó –ë–µ—Ä—ë–º profile –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∞ –Ω–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å
   const { authFetch, profile, setProfile } = useAuth();

   const [cbBalance, setCbBalance] = useState("0.00");
   const [loading, setLoading] = useState(true);
   const [claiming, setClaiming] = useState(false);

   async function loadCashback() {
      try {
         setLoading(true);
         const r = await authFetch("/api/cashback/me/summary/");
         const d = await r.json();
         if (!r.ok) throw new Error(d?.detail || "–û—à–∏–±–∫–∞");
         setCbBalance(d.balance_usd || "0.00");
      } catch (e) {
         console.error(e);
         setCbBalance("0.00");
      } finally {
         setLoading(false);
      }
   }

   useEffect(() => {
      loadCashback();
      // eslint-disable-next-line react-hooks/exhaustive-deps
   }, []);

   async function handleClaim() {
      const amt = Number(cbBalance);
      if (!Number.isFinite(amt) || amt <= 0) return;

      try {
         setClaiming(true);

         // üîπ –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ä–∞–∑—É
         setProfile((p) => {
            const cur = Number(p?.balance_usd || 0);
            return { ...(p || {}), balance_usd: (cur + amt).toFixed(2) };
         });
         setCbBalance("0.00");

         // üîπ –ó–∞–ø—Ä–æ—Å –∫ API
         const r = await authFetch("/api/cashback/me/claim/", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ amount_usd: amt.toFixed(2) }),
         });
         const d = await r.json().catch(() => ({}));
         if (!r.ok) throw new Error(d?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±—ç–∫");

         // üîπ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ—Ç–≤–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
         if (d?.profile_balance_usd != null) {
            setProfile((p) => ({ ...(p || {}), balance_usd: d.profile_balance_usd }));
         }
         await loadCashback();

         alert(`–ó–∞—á–∏—Å–ª–µ–Ω–æ: $${d?.debited ?? amt.toFixed(2)}`);
      } catch (e) {
         // üîÅ –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
         await loadCashback();
         // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å /api/profile –∏ –æ–±–Ω–æ–≤–∏—Ç—å setProfile
         alert(e.message || "–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è");
      } finally {
         setClaiming(false);
      }
   }

   const canClaim = !loading && !claiming && Number(cbBalance) > 0;

   return (
      <div className={s.grid}>
         <div className={s.stat}>
            <div className={s.title}>–î–µ–ø–æ–∑–∏—Ç (–≤—Å–µ–≥–æ)</div>
            <div className={s.value}>${fmtUSD(profile?.deposit_total_usd)}</div>
         </div>
         <div className={s.stat}>
            <div className={s.title}>–ë–∞–ª–∞–Ω—Å</div>
            <div className={s.value}>${fmtUSD(profile?.balance_usd)}</div>
         </div>
         <div className={s.stat}>
            <div className={s.title}>–í—ã–∏–≥—Ä–∞–Ω–æ</div>
            <div className={s.value}>${fmtUSD(profile?.won_total_usd)}</div>
         </div>
         <div className={s.stat}>
            <div className={s.title}>–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ</div>
            <div className={s.value}>${fmtUSD(profile?.lost_total_usd)}</div>
         </div>
         <div className={s.stat}>
            <div className={s.title}>–í—ã–≤–µ–¥–µ–Ω–æ (–≤—Å–µ–≥–æ)</div>
            <div className={s.value}>${fmtUSD(profile?.withdrawn_total_usd)}</div>
         </div>

         {/* –ö—ç—à–±—ç–∫ */}
         <div className={s.stat}>
            <div className={s.title}>–î–æ—Å—Ç—É–ø–Ω—ã–π –∫—ç—à–±—ç–∫</div>
            <div className={s.value}>{loading ? "‚Ä¶" : `$${fmtUSD(cbBalance)}`}</div>

            {Number(cbBalance) > 0 && (
               <button
                  className={root.btnPrimary}
                  onClick={handleClaim}
                  disabled={!canClaim}
                  style={{ marginTop: 8 }}
               >
                  {claiming ? "–ó–∞—á–∏—Å–ª—è–µ–º‚Ä¶" : "–ó–∞—á–∏—Å–ª–∏—Ç—å"}
               </button>
            )}
         </div>
      </div>
   );
}
